import { useResume } from '../../../context/ResumeContext';
import ModernTemplate from './templates/ModernTemplate';
import ClassicTemplate from './templates/ClassicTemplate';
import CreativeTemplate from './templates/CreativeTemplate';
import MinimalTemplate from './templates/MinimalTemplate';
import html2pdf from 'html2pdf.js';
import { Document, Packer, Paragraph, HeadingLevel, TextRun, AlignmentType } from 'docx';

export default function ResumePreview() {
  const { resumeData, selectedTemplate } = useResume();

  const templates = {
    modern: ModernTemplate,
    classic: ClassicTemplate,
    creative: CreativeTemplate,
    minimal: MinimalTemplate
  };

  const SelectedTemplate = templates[selectedTemplate];

  const downloadAsPDF = () => {
    const element = document.getElementById('resume-preview');
    const opt = {
      margin: 1,
      filename: 'resume.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };
    html2pdf().set(opt).from(element).save();
  };

  const createHeadingParagraph = (text) => {
    return new Paragraph({
      text,
      heading: HeadingLevel.HEADING_1,
      spacing: {
        after: 200,
      },
      alignment: AlignmentType.CENTER,
      bold: true
    });
  };

  const createSubHeadingParagraph = (text) => {
    return new Paragraph({
      text,
      heading: HeadingLevel.HEADING_2,
      spacing: {
        before: 200,
        after: 100,
      },
      bold: true
    });
  };

  const createContentParagraph = (text) => {
    return new Paragraph({
      children: [new TextRun({ text, size: 24 })],
      spacing: {
        before: 100,
        after: 100,
      }
    });
  };

  const downloadAsWord = async () => {
    const { personalInfo, professionalSummary, workExperience, education, skills } = resumeData;
    
    // Create document with proper properties
    const doc = new Document({
      creator: "AI Resume Builder",
      title: "Resume",
      description: "Resume generated by AI Resume Builder",
      sections: [{
        properties: {},
        children: [
          // Personal Info
          createHeadingParagraph(personalInfo.fullName),
          createContentParagraph(`${personalInfo.email} | ${personalInfo.phone} | ${personalInfo.location}`),
          
          // Professional Summary
          createSubHeadingParagraph("Professional Summary"),
          createContentParagraph(professionalSummary),
          
          // Work Experience
          createSubHeadingParagraph("Work Experience"),
          ...workExperience.map(exp => [
            createContentParagraph(`${exp.jobTitle} at ${exp.company}`),
            createContentParagraph(`${exp.startDate} - ${exp.endDate}`),
            createContentParagraph(exp.description),
            new Paragraph({ spacing: { after: 200 } })
          ]).flat(),
          
          // Education
          createSubHeadingParagraph("Education"),
          ...education.map(edu => [
            createContentParagraph(`${edu.degree} - ${edu.institution}`),
            createContentParagraph(`${edu.startDate} - ${edu.endDate}`),
            new Paragraph({ spacing: { after: 200 } })
          ]).flat(),
          
          // Skills
          createSubHeadingParagraph("Skills"),
          createContentParagraph(skills.join(", "))
        ]
      }]
    });

    // Generate and download the document
    Packer.toBlob(doc).then(blob => {
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      document.body.appendChild(a);
      a.style.display = 'none';
      a.href = url;
      a.download = 'resume.docx';
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    });
  };

  return (
    <div className="flex flex-col gap-4">
      <div id="resume-preview" className="bg-white shadow-lg">
        <SelectedTemplate data={resumeData} />
      </div>
      <div className="flex justify-center gap-4 my-4">
        <button
          onClick={downloadAsPDF}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Download PDF
        </button>
        <button
          onClick={downloadAsWord}
          className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
        >
          Download Word
        </button>
      </div>
    </div>
  );
}
